# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Server_pb2 as Server__pb2


class JoinServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/Server.JoinServerService/JoinServer',
                request_serializer=Server__pb2.ClientId.SerializeToString,
                response_deserializer=Server__pb2.ServerResponse.FromString,
                )


class JoinServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JoinServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=Server__pb2.ClientId.FromString,
                    response_serializer=Server__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server.JoinServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JoinServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server.JoinServerService/JoinServer',
            Server__pb2.ClientId.SerializeToString,
            Server__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LeaveServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LeaveServer = channel.unary_unary(
                '/Server.LeaveServerService/LeaveServer',
                request_serializer=Server__pb2.ClientId.SerializeToString,
                response_deserializer=Server__pb2.ServerResponse.FromString,
                )


class LeaveServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LeaveServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaveServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=Server__pb2.ClientId.FromString,
                    response_serializer=Server__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server.LeaveServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaveServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server.LeaveServerService/LeaveServer',
            Server__pb2.ClientId.SerializeToString,
            Server__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GetArticlesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetArticles = channel.unary_unary(
                '/Server.GetArticlesService/GetArticles',
                request_serializer=Server__pb2.Article_Request.SerializeToString,
                response_deserializer=Server__pb2.Article_Response.FromString,
                )


class GetArticlesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetArticlesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=Server__pb2.Article_Request.FromString,
                    response_serializer=Server__pb2.Article_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server.GetArticlesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GetArticlesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server.GetArticlesService/GetArticles',
            Server__pb2.Article_Request.SerializeToString,
            Server__pb2.Article_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PublishArticleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishArticle = channel.unary_unary(
                '/Server.PublishArticleService/PublishArticle',
                request_serializer=Server__pb2.Articles.SerializeToString,
                response_deserializer=Server__pb2.ServerResponse.FromString,
                )


class PublishArticleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublishArticleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=Server__pb2.Articles.FromString,
                    response_serializer=Server__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server.PublishArticleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PublishArticleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server.PublishArticleService/PublishArticle',
            Server__pb2.Articles.SerializeToString,
            Server__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
